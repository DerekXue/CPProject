#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="actualCPProject")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertPartTimer(PartTimer instance);
  partial void UpdatePartTimer(PartTimer instance);
  partial void DeletePartTimer(PartTimer instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["actualCPProjectConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<PartTimer> PartTimers
	{
		get
		{
			return this.GetTable<PartTimer>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _CompanyID;
	
	private string _UniqueCode;
	
	private string _CompanyName;
	
	private string _ContactNumber;
	
	private string _PersonInCharge;
	
	private string _Location;
	
	private EntitySet<Department> _Departments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(string value);
    partial void OnCompanyIDChanged();
    partial void OnUniqueCodeChanging(string value);
    partial void OnUniqueCodeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnPersonInChargeChanging(string value);
    partial void OnPersonInChargeChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
	
	public Company()
	{
		this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueCode", DbType="NVarChar(50)")]
	public string UniqueCode
	{
		get
		{
			return this._UniqueCode;
		}
		set
		{
			if ((this._UniqueCode != value))
			{
				this.OnUniqueCodeChanging(value);
				this.SendPropertyChanging();
				this._UniqueCode = value;
				this.SendPropertyChanged("UniqueCode");
				this.OnUniqueCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(50)")]
	public string CompanyName
	{
		get
		{
			return this._CompanyName;
		}
		set
		{
			if ((this._CompanyName != value))
			{
				this.OnCompanyNameChanging(value);
				this.SendPropertyChanging();
				this._CompanyName = value;
				this.SendPropertyChanged("CompanyName");
				this.OnCompanyNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50)")]
	public string ContactNumber
	{
		get
		{
			return this._ContactNumber;
		}
		set
		{
			if ((this._ContactNumber != value))
			{
				this.OnContactNumberChanging(value);
				this.SendPropertyChanging();
				this._ContactNumber = value;
				this.SendPropertyChanged("ContactNumber");
				this.OnContactNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonInCharge", DbType="NVarChar(50)")]
	public string PersonInCharge
	{
		get
		{
			return this._PersonInCharge;
		}
		set
		{
			if ((this._PersonInCharge != value))
			{
				this.OnPersonInChargeChanging(value);
				this.SendPropertyChanging();
				this._PersonInCharge = value;
				this.SendPropertyChanged("PersonInCharge");
				this.OnPersonInChargeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Departments", ThisKey="CompanyID", OtherKey="CompanyID")]
	public EntitySet<Department> Departments
	{
		get
		{
			return this._Departments;
		}
		set
		{
			this._Departments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartTimer")]
public partial class PartTimer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ParttimeID;
	
	private string _EmployeeID;
	
	private string _ContractPeriod;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParttimeIDChanging(string value);
    partial void OnParttimeIDChanged();
    partial void OnEmployeeIDChanging(string value);
    partial void OnEmployeeIDChanged();
    partial void OnContractPeriodChanging(string value);
    partial void OnContractPeriodChanged();
    #endregion
	
	public PartTimer()
	{
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParttimeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ParttimeID
	{
		get
		{
			return this._ParttimeID;
		}
		set
		{
			if ((this._ParttimeID != value))
			{
				this.OnParttimeIDChanging(value);
				this.SendPropertyChanging();
				this._ParttimeID = value;
				this.SendPropertyChanged("ParttimeID");
				this.OnParttimeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="NVarChar(50)")]
	public string EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractPeriod", DbType="NVarChar(50)")]
	public string ContractPeriod
	{
		get
		{
			return this._ContractPeriod;
		}
		set
		{
			if ((this._ContractPeriod != value))
			{
				this.OnContractPeriodChanging(value);
				this.SendPropertyChanging();
				this._ContractPeriod = value;
				this.SendPropertyChanged("ContractPeriod");
				this.OnContractPeriodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PartTimer", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.PartTimers.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.PartTimers.Add(this);
					this._EmployeeID = value.EmployeeID;
				}
				else
				{
					this._EmployeeID = default(string);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DepartmentID;
	
	private string _UniqueCode;
	
	private string _CompanyID;
	
	private string _DepartmentName;
	
	private string _ContactNumber;
	
	private string _PersonInCharge;
	
	private EntitySet<Employee> _Employees;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(string value);
    partial void OnDepartmentIDChanged();
    partial void OnUniqueCodeChanging(string value);
    partial void OnUniqueCodeChanged();
    partial void OnCompanyIDChanging(string value);
    partial void OnCompanyIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnPersonInChargeChanging(string value);
    partial void OnPersonInChargeChanged();
    #endregion
	
	public Department()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueCode", DbType="NVarChar(50)")]
	public string UniqueCode
	{
		get
		{
			return this._UniqueCode;
		}
		set
		{
			if ((this._UniqueCode != value))
			{
				this.OnUniqueCodeChanging(value);
				this.SendPropertyChanging();
				this._UniqueCode = value;
				this.SendPropertyChanged("UniqueCode");
				this.OnUniqueCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="NVarChar(50)")]
	public string CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(50)")]
	public string DepartmentName
	{
		get
		{
			return this._DepartmentName;
		}
		set
		{
			if ((this._DepartmentName != value))
			{
				this.OnDepartmentNameChanging(value);
				this.SendPropertyChanging();
				this._DepartmentName = value;
				this.SendPropertyChanged("DepartmentName");
				this.OnDepartmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50)")]
	public string ContactNumber
	{
		get
		{
			return this._ContactNumber;
		}
		set
		{
			if ((this._ContactNumber != value))
			{
				this.OnContactNumberChanging(value);
				this.SendPropertyChanging();
				this._ContactNumber = value;
				this.SendPropertyChanged("ContactNumber");
				this.OnContactNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonInCharge", DbType="NVarChar(50)")]
	public string PersonInCharge
	{
		get
		{
			return this._PersonInCharge;
		}
		set
		{
			if ((this._PersonInCharge != value))
			{
				this.OnPersonInChargeChanging(value);
				this.SendPropertyChanging();
				this._PersonInCharge = value;
				this.SendPropertyChanged("PersonInCharge");
				this.OnPersonInChargeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Departments.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Departments.Add(this);
					this._CompanyID = value.CompanyID;
				}
				else
				{
					this._CompanyID = default(string);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _EmployeeID;
	
	private string _UniqueCode;
	
	private string _DepartmentID;
	
	private string _PositionName;
	
	private string _PositionTitle;
	
	private string _EmployeeName;
	
	private string _EmployeeIC;
	
	private string _ContactNumber;
	
	private string _Salary;
	
	private string _YearOfExperience;
	
	private System.Nullable<int> _IfParttimer;
	
	private EntitySet<PartTimer> _PartTimers;
	
	private EntityRef<Department> _Department;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(string value);
    partial void OnEmployeeIDChanged();
    partial void OnUniqueCodeChanging(string value);
    partial void OnUniqueCodeChanged();
    partial void OnDepartmentIDChanging(string value);
    partial void OnDepartmentIDChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnPositionTitleChanging(string value);
    partial void OnPositionTitleChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeeICChanging(string value);
    partial void OnEmployeeICChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnSalaryChanging(string value);
    partial void OnSalaryChanged();
    partial void OnYearOfExperienceChanging(string value);
    partial void OnYearOfExperienceChanged();
    partial void OnIfParttimerChanging(System.Nullable<int> value);
    partial void OnIfParttimerChanged();
    #endregion
	
	public Employee()
	{
		this._PartTimers = new EntitySet<PartTimer>(new Action<PartTimer>(this.attach_PartTimers), new Action<PartTimer>(this.detach_PartTimers));
		this._Department = default(EntityRef<Department>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueCode", DbType="NVarChar(50)")]
	public string UniqueCode
	{
		get
		{
			return this._UniqueCode;
		}
		set
		{
			if ((this._UniqueCode != value))
			{
				this.OnUniqueCodeChanging(value);
				this.SendPropertyChanging();
				this._UniqueCode = value;
				this.SendPropertyChanged("UniqueCode");
				this.OnUniqueCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="NVarChar(50)")]
	public string DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(50)")]
	public string PositionName
	{
		get
		{
			return this._PositionName;
		}
		set
		{
			if ((this._PositionName != value))
			{
				this.OnPositionNameChanging(value);
				this.SendPropertyChanging();
				this._PositionName = value;
				this.SendPropertyChanged("PositionName");
				this.OnPositionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionTitle", DbType="NVarChar(50)")]
	public string PositionTitle
	{
		get
		{
			return this._PositionTitle;
		}
		set
		{
			if ((this._PositionTitle != value))
			{
				this.OnPositionTitleChanging(value);
				this.SendPropertyChanging();
				this._PositionTitle = value;
				this.SendPropertyChanged("PositionTitle");
				this.OnPositionTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(50)")]
	public string EmployeeName
	{
		get
		{
			return this._EmployeeName;
		}
		set
		{
			if ((this._EmployeeName != value))
			{
				this.OnEmployeeNameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeName = value;
				this.SendPropertyChanged("EmployeeName");
				this.OnEmployeeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeIC", DbType="NVarChar(50)")]
	public string EmployeeIC
	{
		get
		{
			return this._EmployeeIC;
		}
		set
		{
			if ((this._EmployeeIC != value))
			{
				this.OnEmployeeICChanging(value);
				this.SendPropertyChanging();
				this._EmployeeIC = value;
				this.SendPropertyChanged("EmployeeIC");
				this.OnEmployeeICChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50)")]
	public string ContactNumber
	{
		get
		{
			return this._ContactNumber;
		}
		set
		{
			if ((this._ContactNumber != value))
			{
				this.OnContactNumberChanging(value);
				this.SendPropertyChanging();
				this._ContactNumber = value;
				this.SendPropertyChanged("ContactNumber");
				this.OnContactNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="NVarChar(50)")]
	public string Salary
	{
		get
		{
			return this._Salary;
		}
		set
		{
			if ((this._Salary != value))
			{
				this.OnSalaryChanging(value);
				this.SendPropertyChanging();
				this._Salary = value;
				this.SendPropertyChanged("Salary");
				this.OnSalaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOfExperience", DbType="NVarChar(50)")]
	public string YearOfExperience
	{
		get
		{
			return this._YearOfExperience;
		}
		set
		{
			if ((this._YearOfExperience != value))
			{
				this.OnYearOfExperienceChanging(value);
				this.SendPropertyChanging();
				this._YearOfExperience = value;
				this.SendPropertyChanged("YearOfExperience");
				this.OnYearOfExperienceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IfParttimer", DbType="Int")]
	public System.Nullable<int> IfParttimer
	{
		get
		{
			return this._IfParttimer;
		}
		set
		{
			if ((this._IfParttimer != value))
			{
				this.OnIfParttimerChanging(value);
				this.SendPropertyChanging();
				this._IfParttimer = value;
				this.SendPropertyChanged("IfParttimer");
				this.OnIfParttimerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PartTimer", Storage="_PartTimers", ThisKey="EmployeeID", OtherKey="EmployeeID")]
	public EntitySet<PartTimer> PartTimers
	{
		get
		{
			return this._PartTimers;
		}
		set
		{
			this._PartTimers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._DepartmentID = value.DepartmentID;
				}
				else
				{
					this._DepartmentID = default(string);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PartTimers(PartTimer entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_PartTimers(PartTimer entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}
#pragma warning restore 1591
